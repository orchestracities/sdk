# coding: utf-8

"""
    ngsi_v2

    NGSI V2 API RC-2018.07  # noqa: E501

    The version of the OpenAPI document: 0.2.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ngsi_v2.api_client import ApiClient
from ngsi_v2.exceptions import (
    ApiTypeError,
    ApiValueError
)


class EntitiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_entity(self, request_body, **kwargs):  # noqa: E501
        """create_entity  # noqa: E501

        The payload is an object representing the entity to be created. The object follows the JSON entity Representation format (described in a [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) section). Response: * Successful operation uses 201 Created or 204 No Content (if upsert   option is used). Response includes a `Location` header with the URL   of the created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_entity(request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param dict(str, object) request_body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str options: Options dictionary
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_entity_with_http_info(request_body, **kwargs)  # noqa: E501

    def create_entity_with_http_info(self, request_body, **kwargs):  # noqa: E501
        """create_entity  # noqa: E501

        The payload is an object representing the entity to be created. The object follows the JSON entity Representation format (described in a [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) section). Response: * Successful operation uses 201 Created or 204 No Content (if upsert   option is used). Response includes a `Location` header with the URL   of the created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_entity_with_http_info(request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param dict(str, object) request_body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str options: Options dictionary
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['request_body', 'fiware_service', 'fiware_service_path', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'request_body' is set
        if ('request_body' not in local_var_params or
                local_var_params['request_body'] is None):
            raise ApiValueError("Missing the required parameter `request_body` when calling `create_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_entities(self, **kwargs):  # noqa: E501
        """list_entities  # noqa: E501

        Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](https://fiware.github.io/specifications/ngsiv2/stable) and [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. `idPattern` with `id` and `typePattern` with `type`. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity Representation format (described in [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) section). Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload.   See subsection on   [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_entities(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str fiware_service:
        :param str fiware_service_path:
        :param str id: A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with `idPattern`.
        :param str type: comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with `typePattern`.
        :param str id_pattern: A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with `id`.
        :param str type_pattern: A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with `type`.
        :param str q: A query expression, composed of a list of statements separated by `;`, i.e., q=statement;statements;statement. See [Simple Query Language specification](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str mq: A query expression for attribute metadata, composed of a list of statements separated by `;`, i.e., mq=statement1;statement2;statement3. See [Simple Query Language specification](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str georel: Spatial relationship between matching entities and a reference shape. See [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str geometry: Geografical area to which the query is restricted. See [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str coords: List of latitude-longitude pairs of coordinates separated by `;`. See [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable).
        :param int limit: Limits the number of entities to be retrieved
        :param int offset: Establishes the offset from where entities are retrieved
        :param str attrs: Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order.
        :param str metadata: A list of metadata names to include in the response.
        :param str order_by: Criteria for ordering results. See [Ordering Results](https://fiware.github.io/specifications/ngsiv2/stable) section for details.
        :param str options: Options dictionary
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Entity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_entities_with_http_info(**kwargs)  # noqa: E501

    def list_entities_with_http_info(self, **kwargs):  # noqa: E501
        """list_entities  # noqa: E501

        Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](https://fiware.github.io/specifications/ngsiv2/stable) and [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. `idPattern` with `id` and `typePattern` with `type`. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity Representation format (described in [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) section). Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload.   See subsection on   [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_entities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str fiware_service:
        :param str fiware_service_path:
        :param str id: A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with `idPattern`.
        :param str type: comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with `typePattern`.
        :param str id_pattern: A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with `id`.
        :param str type_pattern: A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with `type`.
        :param str q: A query expression, composed of a list of statements separated by `;`, i.e., q=statement;statements;statement. See [Simple Query Language specification](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str mq: A query expression for attribute metadata, composed of a list of statements separated by `;`, i.e., mq=statement1;statement2;statement3. See [Simple Query Language specification](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str georel: Spatial relationship between matching entities and a reference shape. See [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str geometry: Geografical area to which the query is restricted. See [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable).
        :param str coords: List of latitude-longitude pairs of coordinates separated by `;`. See [Geographical Queries](https://fiware.github.io/specifications/ngsiv2/stable).
        :param int limit: Limits the number of entities to be retrieved
        :param int offset: Establishes the offset from where entities are retrieved
        :param str attrs: Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order.
        :param str metadata: A list of metadata names to include in the response.
        :param str order_by: Criteria for ordering results. See [Ordering Results](https://fiware.github.io/specifications/ngsiv2/stable) section for details.
        :param str options: Options dictionary
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Entity], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['fiware_service', 'fiware_service_path', 'id', 'type', 'id_pattern', 'type_pattern', 'q', 'mq', 'georel', 'geometry', 'coords', 'limit', 'offset', 'attrs', 'metadata', 'order_by', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_entities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id_pattern' in local_var_params:
            query_params.append(('idPattern', local_var_params['id_pattern']))  # noqa: E501
        if 'type_pattern' in local_var_params:
            query_params.append(('typePattern', local_var_params['type_pattern']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'mq' in local_var_params:
            query_params.append(('mq', local_var_params['mq']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'metadata' in local_var_params:
            query_params.append(('metadata', local_var_params['metadata']))  # noqa: E501
        if 'order_by' in local_var_params:
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_entity(self, entity_id, **kwargs):  # noqa: E501
        """remove_entity  # noqa: E501

        Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_entity(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be deleted (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_entity_with_http_info(entity_id, **kwargs)  # noqa: E501

    def remove_entity_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """remove_entity  # noqa: E501

        Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_entity_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be deleted (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'fiware_service', 'fiware_service_path', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `remove_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_all_entity_attributes(self, entity_id, body, **kwargs):  # noqa: E501
        """replace_all_entity_attributes  # noqa: E501

        The request payload is an object representing the new entity attributes. The object follows the JSON entity Representation format (described in a [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) above), except that `id` and `type` are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_entity_attributes(entity_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity in question. (required)
        :param object body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
        :param str options: Operations options
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.replace_all_entity_attributes_with_http_info(entity_id, body, **kwargs)  # noqa: E501

    def replace_all_entity_attributes_with_http_info(self, entity_id, body, **kwargs):  # noqa: E501
        """replace_all_entity_attributes  # noqa: E501

        The request payload is an object representing the new entity attributes. The object follows the JSON entity Representation format (described in a [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) above), except that `id` and `type` are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_all_entity_attributes_with_http_info(entity_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity in question. (required)
        :param object body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
        :param str options: Operations options
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'body', 'fiware_service', 'fiware_service_path', 'type', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_all_entity_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `replace_all_entity_attributes`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `replace_all_entity_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/attrs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_entity(self, entity_id, **kwargs):  # noqa: E501
        """retrieve_entity  # noqa: E501

        The response is an object representing the entity identified by the ID. The object follows the JSON entity Representation format (described in a [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_entity(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be retrieved (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
        :param str attrs: Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response.
        :param str metadata: A list of metadata names to include in the response. See \"Filtering out attributes and metadata\" section for more detail.
        :param str options: Options dictionary
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retrieve_entity_with_http_info(entity_id, **kwargs)  # noqa: E501

    def retrieve_entity_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """retrieve_entity  # noqa: E501

        The response is an object representing the entity identified by the ID. The object follows the JSON entity Representation format (described in a [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable) section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_entity_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be retrieved (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
        :param str attrs: Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response.
        :param str metadata: A list of metadata names to include in the response. See \"Filtering out attributes and metadata\" section for more detail.
        :param str options: Options dictionary
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Entity, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'fiware_service', 'fiware_service_path', 'type', 'attrs', 'metadata', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `retrieve_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'metadata' in local_var_params:
            query_params.append(('metadata', local_var_params['metadata']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_entity_attributes(self, entity_id, **kwargs):  # noqa: E501
        """retrieve_entity_attributes  # noqa: E501

        This request is similar to retreiving the whole entity, however this one omits the `id` and `type` fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_entity_attributes(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be retrieved (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
        :param str attrs: Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response.
        :param str metadata: A list of metadata names to include in the response. See [Filtering out attributes and metadata](https://fiware.github.io/specifications/ngsiv2/stable) section for more detail.
        :param str options: Options dictionary
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retrieve_entity_attributes_with_http_info(entity_id, **kwargs)  # noqa: E501

    def retrieve_entity_attributes_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """retrieve_entity_attributes  # noqa: E501

        This request is similar to retreiving the whole entity, however this one omits the `id` and `type` fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_entity_attributes_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be retrieved (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
        :param str attrs: Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response.
        :param str metadata: A list of metadata names to include in the response. See [Filtering out attributes and metadata](https://fiware.github.io/specifications/ngsiv2/stable) section for more detail.
        :param str options: Options dictionary
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'fiware_service', 'fiware_service_path', 'type', 'attrs', 'metadata', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_entity_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `retrieve_entity_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'metadata' in local_var_params:
            query_params.append(('metadata', local_var_params['metadata']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/attrs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_existing_entity_attributes(self, entity_id, body, **kwargs):  # noqa: E501
        """update_existing_entity_attributes  # noqa: E501

        The request payload is an object representing the attributes to update. The object follows the JSON entity Representation format (described in [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable)  section), except that `id` and `type` are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn't exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_existing_entity_attributes(entity_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be updated (required)
        :param object body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
        :param str options: Operations options
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_existing_entity_attributes_with_http_info(entity_id, body, **kwargs)  # noqa: E501

    def update_existing_entity_attributes_with_http_info(self, entity_id, body, **kwargs):  # noqa: E501
        """update_existing_entity_attributes  # noqa: E501

        The request payload is an object representing the attributes to update. The object follows the JSON entity Representation format (described in [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable)  section), except that `id` and `type` are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn't exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_existing_entity_attributes_with_http_info(entity_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Id of the entity to be updated (required)
        :param object body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
        :param str options: Operations options
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'body', 'fiware_service', 'fiware_service_path', 'type', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_existing_entity_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `update_existing_entity_attributes`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `update_existing_entity_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/attrs', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_or_append_entity_attributes(self, entity_id, body, **kwargs):  # noqa: E501
        """update_or_append_entity_attributes  # noqa: E501

        The request payload is an object representing the attributes to append or update. The object follows the JSON entity Representation format (described in [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable)  section), except that `id` and `type` are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the `append` operation option is used or not. * If `append` is not used: the entity attributes are updated   (if they previously exist) or appended (if they don't previously   exist) with the ones in the payload. * If `append` is used (i.e. strict append semantics): all the attributes   in the payload not previously existing in the entity are appended.   In addition to that, in case some of the attributes in the payload   already exist in the entity, an error is returned.    Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_or_append_entity_attributes(entity_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Entity id to be updated (required)
        :param object body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
        :param str options: Operations options
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_or_append_entity_attributes_with_http_info(entity_id, body, **kwargs)  # noqa: E501

    def update_or_append_entity_attributes_with_http_info(self, entity_id, body, **kwargs):  # noqa: E501
        """update_or_append_entity_attributes  # noqa: E501

        The request payload is an object representing the attributes to append or update. The object follows the JSON entity Representation format (described in [JSON Entity Representation](https://fiware.github.io/specifications/ngsiv2/stable)  section), except that `id` and `type` are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the `append` operation option is used or not. * If `append` is not used: the entity attributes are updated   (if they previously exist) or appended (if they don't previously   exist) with the ones in the payload. * If `append` is used (i.e. strict append semantics): all the attributes   in the payload not previously existing in the entity are appended.   In addition to that, in case some of the attributes in the payload   already exist in the entity, an error is returned.    Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_or_append_entity_attributes_with_http_info(entity_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: Entity id to be updated (required)
        :param object body: (required)
        :param str fiware_service:
        :param str fiware_service_path:
        :param str type: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
        :param str options: Operations options
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'body', 'fiware_service', 'fiware_service_path', 'type', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_or_append_entity_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `update_or_append_entity_attributes`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `update_or_append_entity_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['Fiware-Service'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['Fiware-ServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/attrs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
