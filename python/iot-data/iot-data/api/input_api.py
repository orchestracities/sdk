# coding: utf-8

"""
    iot-data

    IoT Data  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Contact: info@orchestracities.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from iot-data.api_client import ApiClient
from iot-data.exceptions import (
    ApiTypeError,
    ApiValueError
)


class InputApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def json_data(self, i, k, body, **kwargs):  # noqa: E501
        """Send data to a device using JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.json_data(i, k, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str i: Device ID (unique for the API Key). (required)
        :param str k: API Key for the service the device is registered on. (required)
        :param object body: The payload consists of a simple plain JSON object, where each attribute of the object will be mapped to an attribute in the NGSI entity. By \"plain JSON objects\" or \"single-level JSON objects\" we mean:    - valid JSON objects serialized as unescaped strings.   - JSON objects with a single level, i.e.: all the first level attributes of the JSON object are Strings or Numbers (not arrays or other objects).   Additional information are available at [https://fiware-iotagent-json.rtfd.io/](https://fiware-iotagent-json.rtfd.io/) (required)
        :param str t: Timestamp of the measure. Will override the automatic IoTAgent timestamp (optional).
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.json_data_with_http_info(i, k, body, **kwargs)  # noqa: E501

    def json_data_with_http_info(self, i, k, body, **kwargs):  # noqa: E501
        """Send data to a device using JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.json_data_with_http_info(i, k, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str i: Device ID (unique for the API Key). (required)
        :param str k: API Key for the service the device is registered on. (required)
        :param object body: The payload consists of a simple plain JSON object, where each attribute of the object will be mapped to an attribute in the NGSI entity. By \"plain JSON objects\" or \"single-level JSON objects\" we mean:    - valid JSON objects serialized as unescaped strings.   - JSON objects with a single level, i.e.: all the first level attributes of the JSON object are Strings or Numbers (not arrays or other objects).   Additional information are available at [https://fiware-iotagent-json.rtfd.io/](https://fiware-iotagent-json.rtfd.io/) (required)
        :param str t: Timestamp of the measure. Will override the automatic IoTAgent timestamp (optional).
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['i', 'k', 'body', 't']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method json_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'i' is set
        if ('i' not in local_var_params or
                local_var_params['i'] is None):
            raise ApiValueError("Missing the required parameter `i` when calling `json_data`")  # noqa: E501
        # verify the required parameter 'k' is set
        if ('k' not in local_var_params or
                local_var_params['k'] is None):
            raise ApiValueError("Missing the required parameter `k` when calling `json_data`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `json_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'i' in local_var_params:
            query_params.append(('i', local_var_params['i']))  # noqa: E501
        if 'k' in local_var_params:
            query_params.append(('k', local_var_params['k']))  # noqa: E501
        if 't' in local_var_params:
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ul_data(self, i, k, body, **kwargs):  # noqa: E501
        """Send data to a device using UL2.0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ul_data(i, k, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str i: Device ID (unique for the API Key). (required)
        :param str k: API Key for the service the device is registered on. (required)
        :param str body: The payload for information update requests is composed of a list of key-value pairs separated by the `|` character. E.g.: `t|15|k|abc|z|true` In this example, two attributes, one named \"t\" with value \"15\" and another named \"k\" with value \"abc\" are transmitted. NGSI v2 update uses 15 (number), abc (string), and true (boolean). This functionality relies on string measures casting feature implemented in the iotagent library. In addition, the device has to be provisioned using the right types for the attributes to be cast, which are:   * Type `Text` for sting   * Type `Number` for integer or float numbers   * Type `Boolean` for boolean   * Type `None` for null.  Commands syntax is as follows: `<device name>@<command name>|<command value>`.  Additional information are available at [https://fiware-iotagent-ul.rtfd.io/](https://fiware-iotagent-ul.rtfd.io/) (required)
        :param str t: Timestamp of the measure. Will override the automatic IoTAgent timestamp (optional).
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ul_data_with_http_info(i, k, body, **kwargs)  # noqa: E501

    def ul_data_with_http_info(self, i, k, body, **kwargs):  # noqa: E501
        """Send data to a device using UL2.0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ul_data_with_http_info(i, k, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str i: Device ID (unique for the API Key). (required)
        :param str k: API Key for the service the device is registered on. (required)
        :param str body: The payload for information update requests is composed of a list of key-value pairs separated by the `|` character. E.g.: `t|15|k|abc|z|true` In this example, two attributes, one named \"t\" with value \"15\" and another named \"k\" with value \"abc\" are transmitted. NGSI v2 update uses 15 (number), abc (string), and true (boolean). This functionality relies on string measures casting feature implemented in the iotagent library. In addition, the device has to be provisioned using the right types for the attributes to be cast, which are:   * Type `Text` for sting   * Type `Number` for integer or float numbers   * Type `Boolean` for boolean   * Type `None` for null.  Commands syntax is as follows: `<device name>@<command name>|<command value>`.  Additional information are available at [https://fiware-iotagent-ul.rtfd.io/](https://fiware-iotagent-ul.rtfd.io/) (required)
        :param str t: Timestamp of the measure. Will override the automatic IoTAgent timestamp (optional).
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['i', 'k', 'body', 't']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ul_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'i' is set
        if ('i' not in local_var_params or
                local_var_params['i'] is None):
            raise ApiValueError("Missing the required parameter `i` when calling `ul_data`")  # noqa: E501
        # verify the required parameter 'k' is set
        if ('k' not in local_var_params or
                local_var_params['k'] is None):
            raise ApiValueError("Missing the required parameter `k` when calling `ul_data`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `ul_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'i' in local_var_params:
            query_params.append(('i', local_var_params['i']))  # noqa: E501
        if 'k' in local_var_params:
            query_params.append(('k', local_var_params['k']))  # noqa: E501
        if 't' in local_var_params:
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ul', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
