# coding: utf-8

"""
    ngsi_timeseries_v2

    QuantumLeap API  # noqa: E501

    The version of the OpenAPI document: 0.1.2
    Contact: info@orchestracities.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ngsi_timeseries_v2.api_client import ApiClient
from ngsi_timeseries_v2.exceptions import (
    ApiTypeError,
    ApiValueError
)


class InputApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reporter_delete_delete_entities(self, entity_type, **kwargs):  # noqa: E501
        """Delete historical data of all entities of a certain type.  # noqa: E501

        Given an entity type, delete all the historical records of all entities of such type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_delete_delete_entities(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_delete_delete_entities_with_http_info(entity_type, **kwargs)  # noqa: E501

    def reporter_delete_delete_entities_with_http_info(self, entity_type, **kwargs):  # noqa: E501
        """Delete historical data of all entities of a certain type.  # noqa: E501

        Given an entity type, delete all the historical records of all entities of such type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_delete_delete_entities_with_http_info(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'from_date', 'to_date', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_delete_delete_entities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `reporter_delete_delete_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entityType'] = local_var_params['entity_type']  # noqa: E501

        query_params = []
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/types/{entityType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_delete_delete_entity(self, entity_id, **kwargs):  # noqa: E501
        """Delete historical data of a certain entity.  # noqa: E501

        Given an entity (with type and id), delete all its historical records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_delete_delete_entity(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_delete_delete_entity_with_http_info(entity_id, **kwargs)  # noqa: E501

    def reporter_delete_delete_entity_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """Delete historical data of a certain entity.  # noqa: E501

        Given an entity (with type and id), delete all its historical records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_delete_delete_entity_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'type', 'from_date', 'to_date', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_delete_delete_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `reporter_delete_delete_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_notify(self, notification, **kwargs):  # noqa: E501
        """Notify QuantumLeap the arrival of a new NGSI notification.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_notify(notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Notification notification: (required)
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_notify_with_http_info(notification, **kwargs)  # noqa: E501

    def reporter_reporter_notify_with_http_info(self, notification, **kwargs):  # noqa: E501
        """Notify QuantumLeap the arrival of a new NGSI notification.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_notify_with_http_info(notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Notification notification: (required)
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['notification', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_notify" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'notification' is set
        if ('notification' not in local_var_params or
                local_var_params['notification'] is None):
            raise ApiValueError("Missing the required parameter `notification` when calling `reporter_reporter_notify`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification' in local_var_params:
            body_params = local_var_params['notification']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_subscribe(self, orion_url, quantumleap_url, **kwargs):  # noqa: E501
        """Subscribe QL to process Orion notifications of certain type.  # noqa: E501

        This endpoint simplifies the creation of the subscription in orion that will generate the notifications to be consumed by QuantumLeap in order to save historical records. If you want an advanced specification of the notifications, you can always create the subscription in orion at your will. This endpoint just aims to simplify the common use case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_subscribe(orion_url, quantumleap_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str orion_url: The url where QuantumLeap can reach Orion. Do not include specific paths, just the base one including the api version. E.g http://my-orion.com:1026/v2 (required)
        :param str quantumleap_url: The url where Orion can reach QuantumLeap. Do not include specific paths, just the base one including the api version. E.g http://my-quantumleap.com:8668/v2 (required)
        :param str entity_type: The type of entities for which to create a subscription, so as to persist historical data of entities of this type. ATTENTION: If not specified, all entity types will be tracked.
        :param str entity_id: Id of the entity to track. If specified, it takes precedence over the idPattern parameter. If absent but an idPattern is given, then QL will use the idPattern to determine which entities to track. If no idPattern is given either, then QL will use the entityType if present. If not even an entityType is given, then QL will fall back to tracking all entities.
        :param str id_pattern: The pattern covering the entity ids for which to subscribe. If not specified, QL will track all entities of the specified type. This attribute is documented in orion, see https://fiware-orion.readthedocs.io/en/master/user/walkthrough_apiv2/index.html#subscriptions
        :param str attributes: Comma-separated list of attribute names to track. These attributes are used to narrow the condition that triggers data change notifications---i.e. they will be used to fill the attrs field of the subject's condition of the Orion subscription QL creates. They will also be used to fill the attrs field of the notification object in the subscription QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More specifically, call E the set of entities determined by the given combination of entityType, entityId and idPattern. Then we have a set A of all attributes of entities in E whose name is in attributes. When the value of any of the attributes in A changes, Orion will send QL the current values of those attributes. Note that when using this attributes parameter the set of attributes that Orion will track for changes (observed attributes) is the same as the set of attributes that determine which data Orion will put in notifications (notified attributes). If the two sets need to be different, use the observedAttributes and notifiedAttributes parameters below. (If you supply an attributes parameter, observedAttributes and notifiedAttributes will be ignored.)
        :param str observed_attributes: Comma-separated list of attribute names to track. These attributes are used to narrow the condition that triggers data change notifications---i.e. they will be used to fill the attrs field of the subject's condition of the Orion subscription QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More specifically, call E the set of entities determined by the given combination of entityType, entityId and idPattern. Then we have a set A of all attributes of entities in E whose name is in observedAttributes. When the value of any of the attributes in A changes, Orion will send QL the current values of the attributes specified by the notifiedAttributes parameter. If observedAttributes is absent, QL will be notified of any changes to the entities in E.
        :param str notified_attributes: Comma-separated list of attribute names to be used to restrict the data of which QL will keep a history. This list will be used to set the notification's attrs field of the subscription that QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) If not specified, QL will keep a history of all data changes in any of the entities identified by the given combination of entityType, entityId and idPattern.
        :param int throttling: Minimal period of time in seconds which must elapse between two consecutive notifications. This is the value QL will use for the throttling field when creating the subscription. If not specified, it defaults to 1.
        :param str time_index_attribute: The name of a custom attribute to be used as a time index. On receiving notifications containing this attribute, QL will use its value as a time series index for the entity being notified. If specified, it should refer to an entity attribute whose value is an ISO 8601 timestamp.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_subscribe_with_http_info(orion_url, quantumleap_url, **kwargs)  # noqa: E501

    def reporter_reporter_subscribe_with_http_info(self, orion_url, quantumleap_url, **kwargs):  # noqa: E501
        """Subscribe QL to process Orion notifications of certain type.  # noqa: E501

        This endpoint simplifies the creation of the subscription in orion that will generate the notifications to be consumed by QuantumLeap in order to save historical records. If you want an advanced specification of the notifications, you can always create the subscription in orion at your will. This endpoint just aims to simplify the common use case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_subscribe_with_http_info(orion_url, quantumleap_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str orion_url: The url where QuantumLeap can reach Orion. Do not include specific paths, just the base one including the api version. E.g http://my-orion.com:1026/v2 (required)
        :param str quantumleap_url: The url where Orion can reach QuantumLeap. Do not include specific paths, just the base one including the api version. E.g http://my-quantumleap.com:8668/v2 (required)
        :param str entity_type: The type of entities for which to create a subscription, so as to persist historical data of entities of this type. ATTENTION: If not specified, all entity types will be tracked.
        :param str entity_id: Id of the entity to track. If specified, it takes precedence over the idPattern parameter. If absent but an idPattern is given, then QL will use the idPattern to determine which entities to track. If no idPattern is given either, then QL will use the entityType if present. If not even an entityType is given, then QL will fall back to tracking all entities.
        :param str id_pattern: The pattern covering the entity ids for which to subscribe. If not specified, QL will track all entities of the specified type. This attribute is documented in orion, see https://fiware-orion.readthedocs.io/en/master/user/walkthrough_apiv2/index.html#subscriptions
        :param str attributes: Comma-separated list of attribute names to track. These attributes are used to narrow the condition that triggers data change notifications---i.e. they will be used to fill the attrs field of the subject's condition of the Orion subscription QL creates. They will also be used to fill the attrs field of the notification object in the subscription QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More specifically, call E the set of entities determined by the given combination of entityType, entityId and idPattern. Then we have a set A of all attributes of entities in E whose name is in attributes. When the value of any of the attributes in A changes, Orion will send QL the current values of those attributes. Note that when using this attributes parameter the set of attributes that Orion will track for changes (observed attributes) is the same as the set of attributes that determine which data Orion will put in notifications (notified attributes). If the two sets need to be different, use the observedAttributes and notifiedAttributes parameters below. (If you supply an attributes parameter, observedAttributes and notifiedAttributes will be ignored.)
        :param str observed_attributes: Comma-separated list of attribute names to track. These attributes are used to narrow the condition that triggers data change notifications---i.e. they will be used to fill the attrs field of the subject's condition of the Orion subscription QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More specifically, call E the set of entities determined by the given combination of entityType, entityId and idPattern. Then we have a set A of all attributes of entities in E whose name is in observedAttributes. When the value of any of the attributes in A changes, Orion will send QL the current values of the attributes specified by the notifiedAttributes parameter. If observedAttributes is absent, QL will be notified of any changes to the entities in E.
        :param str notified_attributes: Comma-separated list of attribute names to be used to restrict the data of which QL will keep a history. This list will be used to set the notification's attrs field of the subscription that QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) If not specified, QL will keep a history of all data changes in any of the entities identified by the given combination of entityType, entityId and idPattern.
        :param int throttling: Minimal period of time in seconds which must elapse between two consecutive notifications. This is the value QL will use for the throttling field when creating the subscription. If not specified, it defaults to 1.
        :param str time_index_attribute: The name of a custom attribute to be used as a time index. On receiving notifications containing this attribute, QL will use its value as a time series index for the entity being notified. If specified, it should refer to an entity attribute whose value is an ISO 8601 timestamp.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['orion_url', 'quantumleap_url', 'entity_type', 'entity_id', 'id_pattern', 'attributes', 'observed_attributes', 'notified_attributes', 'throttling', 'time_index_attribute', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_subscribe" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'orion_url' is set
        if ('orion_url' not in local_var_params or
                local_var_params['orion_url'] is None):
            raise ApiValueError("Missing the required parameter `orion_url` when calling `reporter_reporter_subscribe`")  # noqa: E501
        # verify the required parameter 'quantumleap_url' is set
        if ('quantumleap_url' not in local_var_params or
                local_var_params['quantumleap_url'] is None):
            raise ApiValueError("Missing the required parameter `quantumleap_url` when calling `reporter_reporter_subscribe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'orion_url' in local_var_params:
            query_params.append(('orionUrl', local_var_params['orion_url']))  # noqa: E501
        if 'quantumleap_url' in local_var_params:
            query_params.append(('quantumleapUrl', local_var_params['quantumleap_url']))  # noqa: E501
        if 'entity_type' in local_var_params:
            query_params.append(('entityType', local_var_params['entity_type']))  # noqa: E501
        if 'entity_id' in local_var_params:
            query_params.append(('entityId', local_var_params['entity_id']))  # noqa: E501
        if 'id_pattern' in local_var_params:
            query_params.append(('idPattern', local_var_params['id_pattern']))  # noqa: E501
        if 'attributes' in local_var_params:
            query_params.append(('attributes', local_var_params['attributes']))  # noqa: E501
        if 'observed_attributes' in local_var_params:
            query_params.append(('observedAttributes', local_var_params['observed_attributes']))  # noqa: E501
        if 'notified_attributes' in local_var_params:
            query_params.append(('notifiedAttributes', local_var_params['notified_attributes']))  # noqa: E501
        if 'throttling' in local_var_params:
            query_params.append(('throttling', local_var_params['throttling']))  # noqa: E501
        if 'time_index_attribute' in local_var_params:
            query_params.append(('timeIndexAttribute', local_var_params['time_index_attribute']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/subscribe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
