# coding: utf-8

"""
    ngsi_timeseries_v2

    QuantumLeap API  # noqa: E501

    The version of the OpenAPI document: 0.1.2
    Contact: info@orchestracities.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ngsi_timeseries_v2.api_client import ApiClient
from ngsi_timeseries_v2.exceptions import (
    ApiTypeError,
    ApiValueError
)


class QueriesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reporter_query1_t1_e1_a_query1_t1_e1_a(self, entity_id, attr_name, **kwargs):  # noqa: E501
        """History of an attribute of a given entity instance.  # noqa: E501

        For example, query max water level of the central tank throughout the last year. Queries can get more sophisticated with the use of filters and query attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_e1_a_query1_t1_e1_a(entity_id, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntityAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_query1_t1_e1_a_query1_t1_e1_a_with_http_info(entity_id, attr_name, **kwargs)  # noqa: E501

    def reporter_query1_t1_e1_a_query1_t1_e1_a_with_http_info(self, entity_id, attr_name, **kwargs):  # noqa: E501
        """History of an attribute of a given entity instance.  # noqa: E501

        For example, query max water level of the central tank throughout the last year. Queries can get more sophisticated with the use of filters and query attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_e1_a_query1_t1_e1_a_with_http_info(entity_id, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntityAttribute, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'attr_name', 'type', 'aggr_method', 'aggr_period', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_query1_t1_e1_a_query1_t1_e1_a" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a`")  # noqa: E501
        # verify the required parameter 'attr_name' is set
        if ('attr_name' not in local_var_params or
                local_var_params['attr_name'] is None):
            raise ApiValueError("Missing the required parameter `attr_name` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501
        if 'attr_name' in local_var_params:
            path_params['attrName'] = local_var_params['attr_name']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/attrs/{attrName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntityAttribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_query1_t1_e1_a_query1_t1_e1_a_value(self, entity_id, attr_name, **kwargs):  # noqa: E501
        """History of an attribute (values only) of a given entity instance.  # noqa: E501

        Similar to the previous, but focusing on the values regardless of the metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_e1_a_query1_t1_e1_a_value(entity_id, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_query1_t1_e1_a_query1_t1_e1_a_value_with_http_info(entity_id, attr_name, **kwargs)  # noqa: E501

    def reporter_query1_t1_e1_a_query1_t1_e1_a_value_with_http_info(self, entity_id, attr_name, **kwargs):  # noqa: E501
        """History of an attribute (values only) of a given entity instance.  # noqa: E501

        Similar to the previous, but focusing on the values regardless of the metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_e1_a_query1_t1_e1_a_value_with_http_info(entity_id, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedValues, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'attr_name', 'type', 'aggr_method', 'aggr_period', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_query1_t1_e1_a_query1_t1_e1_a_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a_value`")  # noqa: E501
        # verify the required parameter 'attr_name' is set
        if ('attr_name' not in local_var_params or
                local_var_params['attr_name'] is None):
            raise ApiValueError("Missing the required parameter `attr_name` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a_value`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a_value`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_query1_t1_e1_a_query1_t1_e1_a_value`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501
        if 'attr_name' in local_var_params:
            path_params['attrName'] = local_var_params['attr_name']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/attrs/{attrName}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_query1_t1_ena_query1_t1_ena(self, entity_id, **kwargs):  # noqa: E501
        """History of N attributes of a given entity instance.  # noqa: E501

        For example, query the average pressure, temperature and humidity of this month in the weather station WS1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_ena_query1_t1_ena(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_query1_t1_ena_query1_t1_ena_with_http_info(entity_id, **kwargs)  # noqa: E501

    def reporter_query1_t1_ena_query1_t1_ena_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """History of N attributes of a given entity instance.  # noqa: E501

        For example, query the average pressure, temperature and humidity of this month in the weather station WS1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_ena_query1_t1_ena_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntity, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'type', 'attrs', 'aggr_method', 'aggr_period', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_query1_t1_ena_query1_t1_ena" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `reporter_query1_t1_ena_query1_t1_ena`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_query1_t1_ena_query1_t1_ena`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_query1_t1_ena_query1_t1_ena`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_query1_t1_ena_query1_t1_ena_value(self, entity_id, **kwargs):  # noqa: E501
        """History of N attributes (values only) of a given entity instance.  # noqa: E501

        For example, query the average pressure, temperature and humidity (values only, no metadata) of this month in the weather station WS1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_ena_query1_t1_ena_value(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntityValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_query1_t1_ena_query1_t1_ena_value_with_http_info(entity_id, **kwargs)  # noqa: E501

    def reporter_query1_t1_ena_query1_t1_ena_value_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """History of N attributes (values only) of a given entity instance.  # noqa: E501

        For example, query the average pressure, temperature and humidity (values only, no metadata) of this month in the weather station WS1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_t1_ena_query1_t1_ena_value_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_id: The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntityValue, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_id', 'type', 'attrs', 'aggr_method', 'aggr_period', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_query1_t1_ena_query1_t1_ena_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in local_var_params or
                local_var_params['entity_id'] is None):
            raise ApiValueError("Missing the required parameter `entity_id` when calling `reporter_query1_t1_ena_query1_t1_ena_value`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_query1_t1_ena_query1_t1_ena_value`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_query1_t1_ena_query1_t1_ena_value`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_id' in local_var_params:
            path_params['entityId'] = local_var_params['entity_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{entityId}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntityValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_query1_tne1_a_query1_tne1_a(self, entity_type, attr_name, **kwargs):  # noqa: E501
        """History of an attribute of N entities of the same type.  # noqa: E501

        For example, query the pressure measurements of this month in all the weather stations. Note in the response, the index and values arrays are parallel. Also, when using aggrMethod, the aggregation is done by-entity instance. In this case, the index array is just the fromDate and toDate values user specified in the request (if any).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_tne1_a_query1_tne1_a(entity_type, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntityTypeAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_query1_tne1_a_query1_tne1_a_with_http_info(entity_type, attr_name, **kwargs)  # noqa: E501

    def reporter_query1_tne1_a_query1_tne1_a_with_http_info(self, entity_type, attr_name, **kwargs):  # noqa: E501
        """History of an attribute of N entities of the same type.  # noqa: E501

        For example, query the pressure measurements of this month in all the weather stations. Note in the response, the index and values arrays are parallel. Also, when using aggrMethod, the aggregation is done by-entity instance. In this case, the index array is just the fromDate and toDate values user specified in the request (if any).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_tne1_a_query1_tne1_a_with_http_info(entity_type, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntityTypeAttribute, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'attr_name', 'id', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_query1_tne1_a_query1_tne1_a" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `reporter_query1_tne1_a_query1_tne1_a`")  # noqa: E501
        # verify the required parameter 'attr_name' is set
        if ('attr_name' not in local_var_params or
                local_var_params['attr_name'] is None):
            raise ApiValueError("Missing the required parameter `attr_name` when calling `reporter_query1_tne1_a_query1_tne1_a`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_query1_tne1_a_query1_tne1_a`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_query1_tne1_a_query1_tne1_a`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entityType'] = local_var_params['entity_type']  # noqa: E501
        if 'attr_name' in local_var_params:
            path_params['attrName'] = local_var_params['attr_name']  # noqa: E501

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/types/{entityType}/attrs/{attrName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntityTypeAttribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_query1_tne1_a_query1_tne1_a_value(self, entity_type, attr_name, **kwargs):  # noqa: E501
        """History of an attribute (values only) of N entities of the same type.  # noqa: E501

        For example, query the average pressure (values only, no metadata) of this month in all the weather stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_tne1_a_query1_tne1_a_value(entity_type, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntityTypeAttributeValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_query1_tne1_a_query1_tne1_a_value_with_http_info(entity_type, attr_name, **kwargs)  # noqa: E501

    def reporter_query1_tne1_a_query1_tne1_a_value_with_http_info(self, entity_type, attr_name, **kwargs):  # noqa: E501
        """History of an attribute (values only) of N entities of the same type.  # noqa: E501

        For example, query the average pressure (values only, no metadata) of this month in all the weather stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_query1_tne1_a_query1_tne1_a_value_with_http_info(entity_type, attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntityTypeAttributeValue, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'attr_name', 'id', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_query1_tne1_a_query1_tne1_a_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `reporter_query1_tne1_a_query1_tne1_a_value`")  # noqa: E501
        # verify the required parameter 'attr_name' is set
        if ('attr_name' not in local_var_params or
                local_var_params['attr_name'] is None):
            raise ApiValueError("Missing the required parameter `attr_name` when calling `reporter_query1_tne1_a_query1_tne1_a_value`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_query1_tne1_a_query1_tne1_a_value`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_query1_tne1_a_query1_tne1_a_value`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entityType'] = local_var_params['entity_type']  # noqa: E501
        if 'attr_name' in local_var_params:
            path_params['attrName'] = local_var_params['attr_name']  # noqa: E501

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/types/{entityType}/attrs/{attrName}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntityTypeAttributeValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_query1_tnena(self, entity_type, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes of N entities of the same type.  # noqa: E501

        For example, query the average pressure, temperature and humidity of this month in all the weather stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query1_tnena(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntityType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_query1_tnena_with_http_info(entity_type, **kwargs)  # noqa: E501

    def reporter_reporter_query1_tnena_with_http_info(self, entity_type, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes of N entities of the same type.  # noqa: E501

        For example, query the average pressure, temperature and humidity of this month in all the weather stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query1_tnena_with_http_info(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntityType, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'id', 'attrs', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_query1_tnena" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `reporter_reporter_query1_tnena`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_reporter_query1_tnena`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_reporter_query1_tnena`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entityType'] = local_var_params['entity_type']  # noqa: E501

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/types/{entityType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntityType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_query1_tnena_value(self, entity_type, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes (values only) of N entities of the same type.  # noqa: E501

        For example, query the average pressure, temperature and humidity (values only, no metadata) of this month in all the weather stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query1_tnena_value(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedEntityTypeValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_query1_tnena_value_with_http_info(entity_type, **kwargs)  # noqa: E501

    def reporter_reporter_query1_tnena_value_with_http_info(self, entity_type, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes (values only) of N entities of the same type.  # noqa: E501

        For example, query the average pressure, temperature and humidity (values only, no metadata) of this month in all the weather stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query1_tnena_value_with_http_info(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_type: The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity. (required)
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedEntityTypeValue, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'id', 'attrs', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_query1_tnena_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `reporter_reporter_query1_tnena_value`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_reporter_query1_tnena_value`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_reporter_query1_tnena_value`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entityType'] = local_var_params['entity_type']  # noqa: E501

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/types/{entityType}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedEntityTypeValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_query_ntne1_a(self, attr_name, **kwargs):  # noqa: E501
        """(To Be Implemented) History of an attribute of N entities of N types.  # noqa: E501

        For example, query the average temperature of this month in all the devices capable of measuring temperature. In this case, you are responsible for providing entity types which contain the attrName.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntne1_a(attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_query_ntne1_a_with_http_info(attr_name, **kwargs)  # noqa: E501

    def reporter_reporter_query_ntne1_a_with_http_info(self, attr_name, **kwargs):  # noqa: E501
        """(To Be Implemented) History of an attribute of N entities of N types.  # noqa: E501

        For example, query the average temperature of this month in all the devices capable of measuring temperature. In this case, you are responsible for providing entity types which contain the attrName.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntne1_a_with_http_info(attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedAttribute, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['attr_name', 'type', 'id', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_query_ntne1_a" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'attr_name' is set
        if ('attr_name' not in local_var_params or
                local_var_params['attr_name'] is None):
            raise ApiValueError("Missing the required parameter `attr_name` when calling `reporter_reporter_query_ntne1_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attr_name' in local_var_params:
            path_params['attrName'] = local_var_params['attr_name']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attrs/{attrName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedAttribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_query_ntne1_a_value(self, attr_name, **kwargs):  # noqa: E501
        """(To Be Implemented) History of an attribute (values only) of N entities of N types.  # noqa: E501

        For example, query the average temperature (values only, no metadata) of this month in all the devices capable of measuring temperature. In this case, you are reponsible for providing entity types which contain the attrName.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntne1_a_value(attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedAttributeValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_query_ntne1_a_value_with_http_info(attr_name, **kwargs)  # noqa: E501

    def reporter_reporter_query_ntne1_a_value_with_http_info(self, attr_name, **kwargs):  # noqa: E501
        """(To Be Implemented) History of an attribute (values only) of N entities of N types.  # noqa: E501

        For example, query the average temperature (values only, no metadata) of this month in all the devices capable of measuring temperature. In this case, you are reponsible for providing entity types which contain the attrName.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntne1_a_value_with_http_info(attr_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str attr_name: The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope. (required)
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedAttributeValue, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['attr_name', 'type', 'id', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_query_ntne1_a_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'attr_name' is set
        if ('attr_name' not in local_var_params or
                local_var_params['attr_name'] is None):
            raise ApiValueError("Missing the required parameter `attr_name` when calling `reporter_reporter_query_ntne1_a_value`")  # noqa: E501

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_reporter_query_ntne1_a_value`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_reporter_query_ntne1_a_value`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'attr_name' in local_var_params:
            path_params['attrName'] = local_var_params['attr_name']  # noqa: E501

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attrs/{attrName}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedAttributeValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_query_ntnena(self, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes of N entities of N types.  # noqa: E501

        This is sort of a query all. The response will likely not fit into a single response so an efficient paging mechanism and sensible defaults will be required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntnena(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedAllAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_query_ntnena_with_http_info(**kwargs)  # noqa: E501

    def reporter_reporter_query_ntnena_with_http_info(self, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes of N entities of N types.  # noqa: E501

        This is sort of a query all. The response will likely not fit into a single response so an efficient paging mechanism and sensible defaults will be required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntnena_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedAllAttribute, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type', 'id', 'attrs', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_query_ntnena" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_reporter_query_ntnena`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_reporter_query_ntnena`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attrs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedAllAttribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reporter_reporter_query_ntnena_value(self, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes (values only) of N entities of N types.  # noqa: E501

        This is sort of a query all. The response will likely not fit into a single response so an efficient paging mechanism and sensible defaults will be required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntnena_value(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IndexedAllAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reporter_reporter_query_ntnena_value_with_http_info(**kwargs)  # noqa: E501

    def reporter_reporter_query_ntnena_value_with_http_info(self, **kwargs):  # noqa: E501
        """(To Be Implemented) History of N attributes (values only) of N entities of N types.  # noqa: E501

        This is sort of a query all. The response will likely not fit into a single response so an efficient paging mechanism and sensible defaults will be required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reporter_reporter_query_ntnena_value_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
        :param str id: Optional. Comma-separated list of entity ids whose data are to be included in the response.
        :param str attrs: Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
        :param str aggr_method: Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
        :param str aggr_period: Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
        :param str aggr_scope: Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global].
        :param str options: Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
        :param str from_date: Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param str to_date: Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
        :param int last_n: Optional. Used to request only the last N values that satisfy the request conditions.
        :param int limit: Optional. Maximum number of results to retrieve in a single response.
        :param int offset: Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
        :param str georel: Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str geometry: Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str coords: Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
        :param str fiware_service: The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param str fiware_service_path: The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IndexedAllAttribute, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['type', 'id', 'attrs', 'aggr_method', 'aggr_period', 'aggr_scope', 'options', 'from_date', 'to_date', 'last_n', 'limit', 'offset', 'georel', 'geometry', 'coords', 'fiware_service', 'fiware_service_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reporter_reporter_query_ntnena_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'georel' in local_var_params and not re.search(r'^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$', local_var_params['georel']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `georel` when calling `reporter_reporter_query_ntnena_value`, must conform to the pattern `/^coveredBy$|^intersects$|^equals$|^disjoint$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$|^near;minDistance:(0|([1-9][0-9]*))(\.[0-9]+)?;maxDistance:(0|([1-9][0-9]*))(\.[0-9]+)?$/`")  # noqa: E501
        if 'coords' in local_var_params and not re.search(r'^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$', local_var_params['coords']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coords` when calling `reporter_reporter_query_ntnena_value`, must conform to the pattern `/^[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?(;[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?,[+,-]?(0|([1-9][0-9]*))(\.[0-9]+)?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'attrs' in local_var_params:
            query_params.append(('attrs', local_var_params['attrs']))  # noqa: E501
        if 'aggr_method' in local_var_params:
            query_params.append(('aggrMethod', local_var_params['aggr_method']))  # noqa: E501
        if 'aggr_period' in local_var_params:
            query_params.append(('aggrPeriod', local_var_params['aggr_period']))  # noqa: E501
        if 'aggr_scope' in local_var_params:
            query_params.append(('aggrScope', local_var_params['aggr_scope']))  # noqa: E501
        if 'options' in local_var_params:
            query_params.append(('options', local_var_params['options']))  # noqa: E501
        if 'from_date' in local_var_params:
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params:
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'last_n' in local_var_params:
            query_params.append(('lastN', local_var_params['last_n']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'georel' in local_var_params:
            query_params.append(('georel', local_var_params['georel']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'coords' in local_var_params:
            query_params.append(('coords', local_var_params['coords']))  # noqa: E501

        header_params = {}
        if 'fiware_service' in local_var_params:
            header_params['fiwareService'] = local_var_params['fiware_service']  # noqa: E501
        if 'fiware_service_path' in local_var_params:
            header_params['fiwareServicePath'] = local_var_params['fiware_service_path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attrs/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndexedAllAttribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
