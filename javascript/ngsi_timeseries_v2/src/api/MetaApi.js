/**
 * ngsi_timeseries_v2
 * QuantumLeap API
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from '../model/Status';
import Version from '../model/Version';

/**
 * Meta service.
 * @module api/MetaApi
 * @version 0.1.2
 */
export default class MetaApi {
  /**
   * Constructs a new MetaApi.
   * @alias module:api/MetaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the reporterHealthGetHealth operation.
   * @callback module:api/MetaApi~reporterHealthGetHealthCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Status} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns the health-check status of QuantumLeap and the services it depends on.
   * This endpoint is intended for administrators of QuantumLeap. Using the information returned by this endpoint they can diagnose problems in the service or its dependencies. This information is also useful for cloud tools such as orchestrators and load balancers with rules based on health-checks. Due to the lack of a standardized response format, we base the implementation on the draft of https://inadarei.github.io/rfc-healthcheck/ QuantumlLeap's dependencies are the following: - CrateDB: Critical - Redis:   Critical only if geocoding is enabled. - OSM:     Non-critical
   * @param {module:api/MetaApi~reporterHealthGetHealthCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Status}
   */
  reporterHealthGetHealth(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Status;
    return this.apiClient.callApi(
      '/health',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterConfig operation.
   * @callback module:api/MetaApi~reporterReporterConfigCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) Customize your persistance configuration to better suit your needs.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {Number} opts.replicas The number of replicas to use for the selected types.
   * @param {module:api/MetaApi~reporterReporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
   */
  reporterReporterConfig(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      type: opts['type'],
      replicas: opts['replicas'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterVersionVersion operation.
   * @callback module:api/MetaApi~reporterVersionVersionCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Version} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns the version of QuantumLeap.
   * @param {module:api/MetaApi~reporterVersionVersionCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Version}
   */
  reporterVersionVersion(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Version;
    return this.apiClient.callApi(
      '/version',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
