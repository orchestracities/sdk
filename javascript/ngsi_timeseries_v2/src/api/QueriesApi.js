/**
 * ngsi_timeseries_v2
 * QuantumLeap API
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorResponse from '../model/ErrorResponse';
import IndexedAllAttribute from '../model/IndexedAllAttribute';
import IndexedAttribute from '../model/IndexedAttribute';
import IndexedAttributeValue from '../model/IndexedAttributeValue';
import IndexedEntity from '../model/IndexedEntity';
import IndexedEntityAttribute from '../model/IndexedEntityAttribute';
import IndexedEntityType from '../model/IndexedEntityType';
import IndexedEntityTypeAttribute from '../model/IndexedEntityTypeAttribute';
import IndexedEntityTypeAttributeValue from '../model/IndexedEntityTypeAttributeValue';
import IndexedEntityTypeValue from '../model/IndexedEntityTypeValue';
import IndexedEntityValue from '../model/IndexedEntityValue';
import IndexedValues from '../model/IndexedValues';

/**
 * Queries service.
 * @module api/QueriesApi
 * @version 0.1.2
 */
export default class QueriesApi {
  /**
   * Constructs a new QueriesApi.
   * @alias module:api/QueriesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the reporterQuery1T1E1AQuery1T1E1A operation.
   * @callback module:api/QueriesApi~reporterQuery1T1E1AQuery1T1E1ACallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntityAttribute} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * History of an attribute of a given entity instance.
   * For example, query max water level of the central tank throughout the last year. Queries can get more sophisticated with the use of filters and query attributes.
   * @param {String} entityId The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity.
   * @param {String} attrName The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterQuery1T1E1AQuery1T1E1ACallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntityAttribute}
   */
  reporterQuery1T1E1AQuery1T1E1A(entityId, attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling reporterQuery1T1E1AQuery1T1E1A"
      );
    }
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling reporterQuery1T1E1AQuery1T1E1A"
      );
    }

    let pathParams = {
      entityId: entityId,
      attrName: attrName,
    };
    let queryParams = {
      type: opts['type'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntityAttribute;
    return this.apiClient.callApi(
      '/entities/{entityId}/attrs/{attrName}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterQuery1T1E1AQuery1T1E1AValue operation.
   * @callback module:api/QueriesApi~reporterQuery1T1E1AQuery1T1E1AValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedValues} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * History of an attribute (values only) of a given entity instance.
   * Similar to the previous, but focusing on the values regardless of the metadata.
   * @param {String} entityId The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity.
   * @param {String} attrName The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterQuery1T1E1AQuery1T1E1AValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedValues}
   */
  reporterQuery1T1E1AQuery1T1E1AValue(entityId, attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling reporterQuery1T1E1AQuery1T1E1AValue"
      );
    }
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling reporterQuery1T1E1AQuery1T1E1AValue"
      );
    }

    let pathParams = {
      entityId: entityId,
      attrName: attrName,
    };
    let queryParams = {
      type: opts['type'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedValues;
    return this.apiClient.callApi(
      '/entities/{entityId}/attrs/{attrName}/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterQuery1T1ENAQuery1T1ENA operation.
   * @callback module:api/QueriesApi~reporterQuery1T1ENAQuery1T1ENACallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntity} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * History of N attributes of a given entity instance.
   * For example, query the average pressure, temperature and humidity of this month in the weather station WS1.
   * @param {String} entityId The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.attrs Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterQuery1T1ENAQuery1T1ENACallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntity}
   */
  reporterQuery1T1ENAQuery1T1ENA(entityId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling reporterQuery1T1ENAQuery1T1ENA"
      );
    }

    let pathParams = {
      entityId: entityId,
    };
    let queryParams = {
      type: opts['type'],
      attrs: opts['attrs'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntity;
    return this.apiClient.callApi(
      '/entities/{entityId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterQuery1T1ENAQuery1T1ENAValue operation.
   * @callback module:api/QueriesApi~reporterQuery1T1ENAQuery1T1ENAValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntityValue} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * History of N attributes (values only) of a given entity instance.
   * For example, query the average pressure, temperature and humidity (values only, no metadata) of this month in the weather station WS1.
   * @param {String} entityId The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.attrs Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterQuery1T1ENAQuery1T1ENAValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntityValue}
   */
  reporterQuery1T1ENAQuery1T1ENAValue(entityId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling reporterQuery1T1ENAQuery1T1ENAValue"
      );
    }

    let pathParams = {
      entityId: entityId,
    };
    let queryParams = {
      type: opts['type'],
      attrs: opts['attrs'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntityValue;
    return this.apiClient.callApi(
      '/entities/{entityId}/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterQuery1TNE1AQuery1TNE1A operation.
   * @callback module:api/QueriesApi~reporterQuery1TNE1AQuery1TNE1ACallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntityTypeAttribute} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * History of an attribute of N entities of the same type.
   * For example, query the pressure measurements of this month in all the weather stations. Note in the response, the index and values arrays are parallel. Also, when using aggrMethod, the aggregation is done by-entity instance. In this case, the index array is just the fromDate and toDate values user specified in the request (if any).
   * @param {String} entityType The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity.
   * @param {String} attrName The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope.
   * @param {Object} opts Optional parameters
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterQuery1TNE1AQuery1TNE1ACallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntityTypeAttribute}
   */
  reporterQuery1TNE1AQuery1TNE1A(entityType, attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityType' is set
    if (entityType === undefined || entityType === null) {
      throw new Error(
        "Missing the required parameter 'entityType' when calling reporterQuery1TNE1AQuery1TNE1A"
      );
    }
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling reporterQuery1TNE1AQuery1TNE1A"
      );
    }

    let pathParams = {
      entityType: entityType,
      attrName: attrName,
    };
    let queryParams = {
      id: opts['id'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntityTypeAttribute;
    return this.apiClient.callApi(
      '/types/{entityType}/attrs/{attrName}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterQuery1TNE1AQuery1TNE1AValue operation.
   * @callback module:api/QueriesApi~reporterQuery1TNE1AQuery1TNE1AValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntityTypeAttributeValue} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * History of an attribute (values only) of N entities of the same type.
   * For example, query the average pressure (values only, no metadata) of this month in all the weather stations.
   * @param {String} entityType The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity.
   * @param {String} attrName The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope.
   * @param {Object} opts Optional parameters
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterQuery1TNE1AQuery1TNE1AValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntityTypeAttributeValue}
   */
  reporterQuery1TNE1AQuery1TNE1AValue(entityType, attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityType' is set
    if (entityType === undefined || entityType === null) {
      throw new Error(
        "Missing the required parameter 'entityType' when calling reporterQuery1TNE1AQuery1TNE1AValue"
      );
    }
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling reporterQuery1TNE1AQuery1TNE1AValue"
      );
    }

    let pathParams = {
      entityType: entityType,
      attrName: attrName,
    };
    let queryParams = {
      id: opts['id'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntityTypeAttributeValue;
    return this.apiClient.callApi(
      '/types/{entityType}/attrs/{attrName}/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterQuery1TNENA operation.
   * @callback module:api/QueriesApi~reporterReporterQuery1TNENACallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntityType} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) History of N attributes of N entities of the same type.
   * For example, query the average pressure, temperature and humidity of this month in all the weather stations.
   * @param {String} entityType The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity.
   * @param {Object} opts Optional parameters
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {String} opts.attrs Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterReporterQuery1TNENACallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntityType}
   */
  reporterReporterQuery1TNENA(entityType, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityType' is set
    if (entityType === undefined || entityType === null) {
      throw new Error(
        "Missing the required parameter 'entityType' when calling reporterReporterQuery1TNENA"
      );
    }

    let pathParams = {
      entityType: entityType,
    };
    let queryParams = {
      id: opts['id'],
      attrs: opts['attrs'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntityType;
    return this.apiClient.callApi(
      '/types/{entityType}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterQuery1TNENAValue operation.
   * @callback module:api/QueriesApi~reporterReporterQuery1TNENAValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedEntityTypeValue} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) History of N attributes (values only) of N entities of the same type.
   * For example, query the average pressure, temperature and humidity (values only, no metadata) of this month in all the weather stations.
   * @param {String} entityType The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity.
   * @param {Object} opts Optional parameters
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {String} opts.attrs Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterReporterQuery1TNENAValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedEntityTypeValue}
   */
  reporterReporterQuery1TNENAValue(entityType, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityType' is set
    if (entityType === undefined || entityType === null) {
      throw new Error(
        "Missing the required parameter 'entityType' when calling reporterReporterQuery1TNENAValue"
      );
    }

    let pathParams = {
      entityType: entityType,
    };
    let queryParams = {
      id: opts['id'],
      attrs: opts['attrs'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedEntityTypeValue;
    return this.apiClient.callApi(
      '/types/{entityType}/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterQueryNTNE1A operation.
   * @callback module:api/QueriesApi~reporterReporterQueryNTNE1ACallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedAttribute} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) History of an attribute of N entities of N types.
   * For example, query the average temperature of this month in all the devices capable of measuring temperature. In this case, you are responsible for providing entity types which contain the attrName.
   * @param {String} attrName The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterReporterQueryNTNE1ACallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedAttribute}
   */
  reporterReporterQueryNTNE1A(attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling reporterReporterQueryNTNE1A"
      );
    }

    let pathParams = {
      attrName: attrName,
    };
    let queryParams = {
      type: opts['type'],
      id: opts['id'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedAttribute;
    return this.apiClient.callApi(
      '/attrs/{attrName}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterQueryNTNE1AValue operation.
   * @callback module:api/QueriesApi~reporterReporterQueryNTNE1AValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedAttributeValue} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) History of an attribute (values only) of N entities of N types.
   * For example, query the average temperature (values only, no metadata) of this month in all the devices capable of measuring temperature. In this case, you are reponsible for providing entity types which contain the attrName.
   * @param {String} attrName The name of the attribute the query is interested on. It must be a valid attribute of all the entities covered by the query scope.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterReporterQueryNTNE1AValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedAttributeValue}
   */
  reporterReporterQueryNTNE1AValue(attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling reporterReporterQueryNTNE1AValue"
      );
    }

    let pathParams = {
      attrName: attrName,
    };
    let queryParams = {
      type: opts['type'],
      id: opts['id'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedAttributeValue;
    return this.apiClient.callApi(
      '/attrs/{attrName}/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterQueryNTNENA operation.
   * @callback module:api/QueriesApi~reporterReporterQueryNTNENACallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedAllAttribute} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) History of N attributes of N entities of N types.
   * This is sort of a query all. The response will likely not fit into a single response so an efficient paging mechanism and sensible defaults will be required.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {String} opts.attrs Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterReporterQueryNTNENACallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedAllAttribute}
   */
  reporterReporterQueryNTNENA(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      type: opts['type'],
      id: opts['id'],
      attrs: opts['attrs'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedAllAttribute;
    return this.apiClient.callApi(
      '/attrs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterQueryNTNENAValue operation.
   * @callback module:api/QueriesApi~reporterReporterQueryNTNENAValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/IndexedAllAttribute} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * (To Be Implemented) History of N attributes (values only) of N entities of N types.
   * This is sort of a query all. The response will likely not fit into a single response so an efficient paging mechanism and sensible defaults will be required.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.id Optional. Comma-separated list of entity ids whose data are to be included in the response.
   * @param {String} opts.attrs Optional. Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If not specified, all attributes are included in the response in arbitrary order.
   * @param {module:model/String} opts.aggrMethod Optional. The function to apply to the raw data filtered by the query parameters. If not given, the returned data are the same raw inserted data.
   * @param {module:model/String} opts.aggrPeriod Optional. If not defined, the aggregation will apply to all the values contained in the search result. If defined, the aggregation function will instead be applied N times, once for each period, and all those results will be considered for the response. For example, a query asking for the average temperature of an attribute will typically return 1 value. However, with an aggregationPeriod of day, you get the daily average of the temperature instead (more than one value assuming you had measurements across many days within the scope of your search result). aggrPeriod must be accompanied by an aggrMethod, and the aggrMethod will be applied to all the numeric attributes specified in attrs; the rest of the non-numerical attrs will be ignored. By default, the response is grouped by entity_id. See aggrScope to create aggregation across entities.
   * @param {module:model/String} opts.aggrScope Optional. (This parameter is not yet supported). When the query results cover historical data for multiple entities instances, you can define the aggregation method to be applied for each entity instance [entity] or across them [global]. (default to 'entity')
   * @param {module:model/String} opts.options Optional. (This parameter is not yet supported). Options dictionary to format output. See definition in NGSIv2 for example here: https://orioncontextbroker.docs.apiary.io/#reference/entities/list-entities/list-entities
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {Number} opts.lastN Optional. Used to request only the last N values that satisfy the request conditions.
   * @param {Number} opts.limit Optional. Maximum number of results to retrieve in a single response. (default to 10000)
   * @param {Number} opts.offset Optional. Offset to apply to the response results. For example, if the query was to return 10 results and you use an offset of 1, the response will return the last 9 values. Make sure you don't give more offset than the number of results.
   * @param {String} opts.georel Optional. It specifies a spatial relationship between matching entities and a reference shape (geometry). This parameter is used to perform geographical queries with the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {module:model/String} opts.geometry Optional but required if georel is specified. This parameter defines the reference shape to be used for geographical queries and has the same semantics as in the FIWARE-NGSI v2 Specification. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.coords Optional but required if georel is specified. This parameter defines the reference shape (geometry) in terms of WGS 84 coordinates and has the same semantics as in the FIWARE-NGSI v2 Specification, except we only accept coordinates in decimal degrees---e.g. `40.714,-74.006` is okay, but not `40 42' 51'',74 0' 21''`. Full details can be found in the Geographical Queries section of the specification: http://fiware.github.io/specifications/ngsiv2/stable/.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/QueriesApi~reporterReporterQueryNTNENAValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/IndexedAllAttribute}
   */
  reporterReporterQueryNTNENAValue(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      type: opts['type'],
      id: opts['id'],
      attrs: opts['attrs'],
      aggrMethod: opts['aggrMethod'],
      aggrPeriod: opts['aggrPeriod'],
      aggrScope: opts['aggrScope'],
      options: opts['options'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
      lastN: opts['lastN'],
      limit: opts['limit'],
      offset: opts['offset'],
      georel: opts['georel'],
      geometry: opts['geometry'],
      coords: opts['coords'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = IndexedAllAttribute;
    return this.apiClient.callApi(
      '/attrs/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
