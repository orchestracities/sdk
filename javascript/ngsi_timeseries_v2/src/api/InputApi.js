/**
 * ngsi_timeseries_v2
 * QuantumLeap API
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorResponse from '../model/ErrorResponse';
import Notification from '../model/Notification';

/**
 * Input service.
 * @module api/InputApi
 * @version 0.1.2
 */
export default class InputApi {
  /**
   * Constructs a new InputApi.
   * @alias module:api/InputApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the reporterDeleteDeleteEntities operation.
   * @callback module:api/InputApi~reporterDeleteDeleteEntitiesCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete historical data of all entities of a certain type.
   * Given an entity type, delete all the historical records of all entities of such type.
   * @param {String} entityType The entity type in which the query is restricted on. Used to constraint the search to entities of this type, specially useful when the entity id is not enough to uniquely identify an entity.
   * @param {Object} opts Optional parameters
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/InputApi~reporterDeleteDeleteEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
   */
  reporterDeleteDeleteEntities(entityType, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityType' is set
    if (entityType === undefined || entityType === null) {
      throw new Error(
        "Missing the required parameter 'entityType' when calling reporterDeleteDeleteEntities"
      );
    }

    let pathParams = {
      entityType: entityType,
    };
    let queryParams = {
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/types/{entityType}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterDeleteDeleteEntity operation.
   * @callback module:api/InputApi~reporterDeleteDeleteEntityCallback
   * @param {String} error Error message, if any.
   * @param {String} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete historical data of a certain entity.
   * Given an entity (with type and id), delete all its historical records.
   * @param {String} entityId The entity id in which the query is restricted on. If the id is unique among all entity types, this could be used to uniquely identify the entity instance. Otherwise, you will have to use the entityType attribute to resolve ambiguity.
   * @param {Object} opts Optional parameters
   * @param {String} opts.type Comma-separated list of entity types whose data are to be included in the response. Use only one (no comma) when required. If used to resolve ambiguity for the given entityId, make sure the given entityId exists for this entityType.
   * @param {String} opts.fromDate Optional. The starting date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.toDate Optional. The final date and time (inclusive) from which the context information is queried. Must be in ISO8601 format (e.g., 2018-01-05T15:44:34)
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/InputApi~reporterDeleteDeleteEntityCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link String}
   */
  reporterDeleteDeleteEntity(entityId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling reporterDeleteDeleteEntity"
      );
    }

    let pathParams = {
      entityId: entityId,
    };
    let queryParams = {
      type: opts['type'],
      fromDate: opts['fromDate'],
      toDate: opts['toDate'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json'];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/entities/{entityId}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterNotify operation.
   * @callback module:api/InputApi~reporterReporterNotifyCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Notify QuantumLeap the arrival of a new NGSI notification.
   * @param {module:model/Notification} notification
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/InputApi~reporterReporterNotifyCallback} callback The callback function, accepting three arguments: error, data, response
   */
  reporterReporterNotify(notification, opts, callback) {
    opts = opts || {};
    let postBody = notification;
    // verify the required parameter 'notification' is set
    if (notification === undefined || notification === null) {
      throw new Error(
        "Missing the required parameter 'notification' when calling reporterReporterNotify"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = ['application/json'];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/notify',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the reporterReporterSubscribe operation.
   * @callback module:api/InputApi~reporterReporterSubscribeCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Subscribe QL to process Orion notifications of certain type.
   * This endpoint simplifies the creation of the subscription in orion that will generate the notifications to be consumed by QuantumLeap in order to save historical records. If you want an advanced specification of the notifications, you can always create the subscription in orion at your will. This endpoint just aims to simplify the common use case.
   * @param {String} orionUrl The url where QuantumLeap can reach Orion. Do not include specific paths, just the base one including the api version. E.g http://my-orion.com:1026/v2
   * @param {String} quantumleapUrl The url where Orion can reach QuantumLeap. Do not include specific paths, just the base one including the api version. E.g http://my-quantumleap.com:8668/v2
   * @param {Object} opts Optional parameters
   * @param {String} opts.entityType The type of entities for which to create a subscription, so as to persist historical data of entities of this type. ATTENTION: If not specified, all entity types will be tracked.
   * @param {String} opts.entityId Id of the entity to track. If specified, it takes precedence over the idPattern parameter. If absent but an idPattern is given, then QL will use the idPattern to determine which entities to track. If no idPattern is given either, then QL will use the entityType if present. If not even an entityType is given, then QL will fall back to tracking all entities.
   * @param {String} opts.idPattern The pattern covering the entity ids for which to subscribe. If not specified, QL will track all entities of the specified type. This attribute is documented in orion, see https://fiware-orion.readthedocs.io/en/master/user/walkthrough_apiv2/index.html#subscriptions
   * @param {String} opts.attributes Comma-separated list of attribute names to track. These attributes are used to narrow the condition that triggers data change notifications---i.e. they will be used to fill the attrs field of the subject's condition of the Orion subscription QL creates. They will also be used to fill the attrs field of the notification object in the subscription QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More specifically, call E the set of entities determined by the given combination of entityType, entityId and idPattern. Then we have a set A of all attributes of entities in E whose name is in attributes. When the value of any of the attributes in A changes, Orion will send QL the current values of those attributes. Note that when using this attributes parameter the set of attributes that Orion will track for changes (observed attributes) is the same as the set of attributes that determine which data Orion will put in notifications (notified attributes). If the two sets need to be different, use the observedAttributes and notifiedAttributes parameters below. (If you supply an attributes parameter, observedAttributes and notifiedAttributes will be ignored.)
   * @param {String} opts.observedAttributes Comma-separated list of attribute names to track. These attributes are used to narrow the condition that triggers data change notifications---i.e. they will be used to fill the attrs field of the subject's condition of the Orion subscription QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More specifically, call E the set of entities determined by the given combination of entityType, entityId and idPattern. Then we have a set A of all attributes of entities in E whose name is in observedAttributes. When the value of any of the attributes in A changes, Orion will send QL the current values of the attributes specified by the notifiedAttributes parameter. If observedAttributes is absent, QL will be notified of any changes to the entities in E.
   * @param {String} opts.notifiedAttributes Comma-separated list of attribute names to be used to restrict the data of which QL will keep a history. This list will be used to set the notification's attrs field of the subscription that QL creates. (Full details at: http://telefonicaid.github.io/fiware-orion/api/v2/stable/) If not specified, QL will keep a history of all data changes in any of the entities identified by the given combination of entityType, entityId and idPattern.
   * @param {Number} opts.throttling Minimal period of time in seconds which must elapse between two consecutive notifications. This is the value QL will use for the throttling field when creating the subscription. If not specified, it defaults to 1.
   * @param {String} opts.timeIndexAttribute The name of a custom attribute to be used as a time index. On receiving notifications containing this attribute, QL will use its value as a time series index for the entity being notified. If specified, it should refer to an entity attribute whose value is an ISO 8601 timestamp.
   * @param {String} opts.fiwareService The corresponding 'fiware-service' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {String} opts.fiwareServicePath The corresponding 'fiware-servicepath' header. See http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
   * @param {module:api/InputApi~reporterReporterSubscribeCallback} callback The callback function, accepting three arguments: error, data, response
   */
  reporterReporterSubscribe(orionUrl, quantumleapUrl, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'orionUrl' is set
    if (orionUrl === undefined || orionUrl === null) {
      throw new Error(
        "Missing the required parameter 'orionUrl' when calling reporterReporterSubscribe"
      );
    }
    // verify the required parameter 'quantumleapUrl' is set
    if (quantumleapUrl === undefined || quantumleapUrl === null) {
      throw new Error(
        "Missing the required parameter 'quantumleapUrl' when calling reporterReporterSubscribe"
      );
    }

    let pathParams = {};
    let queryParams = {
      orionUrl: orionUrl,
      quantumleapUrl: quantumleapUrl,
      entityType: opts['entityType'],
      entityId: opts['entityId'],
      idPattern: opts['idPattern'],
      attributes: opts['attributes'],
      observedAttributes: opts['observedAttributes'],
      notifiedAttributes: opts['notifiedAttributes'],
      throttling: opts['throttling'],
      timeIndexAttribute: opts['timeIndexAttribute'],
    };
    let headerParams = {
      fiwareService: opts['fiwareService'],
      fiwareServicePath: opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/subscribe',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
