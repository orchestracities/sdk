/**
 * ngsi_v2
 * NGSI V2 API RC-2018.07
 *
 * The version of the OpenAPI document: 0.2.2
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorResponse from '../model/ErrorResponse';
import Subscription from '../model/Subscription';
import SubscriptionBody from '../model/SubscriptionBody';

/**
 * Subscriptions service.
 * @module api/SubscriptionsApi
 * @version 0.2.2
 */
export default class SubscriptionsApi {
  /**
   * Constructs a new SubscriptionsApi.
   * @alias module:api/SubscriptionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createANewSubscription operation.
   * @callback module:api/SubscriptionsApi~createANewSubscriptionCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Creates a new subscription. The subscription is represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 201 Created * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {module:model/SubscriptionBody} subscriptionBody
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {module:api/SubscriptionsApi~createANewSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
   */
  createANewSubscription(subscriptionBody, opts, callback) {
    opts = opts || {};
    let postBody = subscriptionBody;
    // verify the required parameter 'subscriptionBody' is set
    if (subscriptionBody === undefined || subscriptionBody === null) {
      throw new Error(
        "Missing the required parameter 'subscriptionBody' when calling createANewSubscription"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/subscriptions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the deleteSubscription operation.
   * @callback module:api/SubscriptionsApi~deleteSubscriptionCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Cancels subscription. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {String} subscriptionId subscription Id.
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {module:api/SubscriptionsApi~deleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
   */
  deleteSubscription(subscriptionId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId === undefined || subscriptionId === null) {
      throw new Error(
        "Missing the required parameter 'subscriptionId' when calling deleteSubscription"
      );
    }

    let pathParams = {
      subscriptionId: subscriptionId,
    };
    let queryParams = {};
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/subscriptions/{subscriptionId}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the retrieveSubscription operation.
   * @callback module:api/SubscriptionsApi~retrieveSubscriptionCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Subscription} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * The response is the subscription represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {String} subscriptionId subscription Id.
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {module:api/SubscriptionsApi~retrieveSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Subscription}
   */
  retrieveSubscription(subscriptionId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId === undefined || subscriptionId === null) {
      throw new Error(
        "Missing the required parameter 'subscriptionId' when calling retrieveSubscription"
      );
    }

    let pathParams = {
      subscriptionId: subscriptionId,
    };
    let queryParams = {};
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Subscription;
    return this.apiClient.callApi(
      '/subscriptions/{subscriptionId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the retrieveSubscriptions operation.
   * @callback module:api/SubscriptionsApi~retrieveSubscriptionsCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Subscription>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns a list of all the subscriptions present in the system. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload.See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {Number} opts.limit Limit the number of types to be retrieved
   * @param {Number} opts.offset Skip a number of records
   * @param {module:model/String} opts.options Options dictionary
   * @param {module:api/SubscriptionsApi~retrieveSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Subscription>}
   */
  retrieveSubscriptions(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
      options: opts['options'],
    };
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Subscription];
    return this.apiClient.callApi(
      '/subscriptions',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the updateSubscription operation.
   * @callback module:api/SubscriptionsApi~updateSubscriptionCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Only the fields included in the request are updated in the subscription. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {String} subscriptionId subscription Id.
   * @param {module:model/SubscriptionBody} subscriptionBody
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {module:api/SubscriptionsApi~updateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
   */
  updateSubscription(subscriptionId, subscriptionBody, opts, callback) {
    opts = opts || {};
    let postBody = subscriptionBody;
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId === undefined || subscriptionId === null) {
      throw new Error(
        "Missing the required parameter 'subscriptionId' when calling updateSubscription"
      );
    }
    // verify the required parameter 'subscriptionBody' is set
    if (subscriptionBody === undefined || subscriptionBody === null) {
      throw new Error(
        "Missing the required parameter 'subscriptionBody' when calling updateSubscription"
      );
    }

    let pathParams = {
      subscriptionId: subscriptionId,
    };
    let queryParams = {};
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/subscriptions/{subscriptionId}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
