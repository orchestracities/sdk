/**
 * ngsi_v2
 * NGSI V2 API RC-2018.07
 *
 * The version of the OpenAPI document: 0.2.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValueObject from '../model/AttributeValueObject';
import ErrorResponse from '../model/ErrorResponse';

/**
 * AttributeValue service.
 * @module api/AttributeValueApi
 * @version 0.2.2
 */
export default class AttributeValueApi {
  /**
   * Constructs a new AttributeValueApi.
   * @alias module:api/AttributeValueApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the getAttributeValue operation.
   * @callback module:api/AttributeValueApi~getAttributeValueCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AttributeValueObject} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * This operation returns the `value` property with the value of the attribute. * If attribute value is JSON Array or Object:   * If `Accept` header can be expanded to `application/json` or     `text/plain` return the value as a JSON with a response type of     application/json or text/plain (whichever is the first in `Accept`     header or `application/json` in the case of `Accept: *_/_*`).   * Else return a HTTP error \"406 Not Acceptable: accepted MIME types:     application/json, text/plain\" * If attribute value is a string, number, null or boolean:   * If `Accept` header can be expanded to text/plain return the value     as text. In case of a string, citation     marks are used at the begining and end.   * Else return a HTTP error     \"406 Not Acceptable: accepted MIME types: text/plain\" Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {String} entityId Id of the entity in question
   * @param {String} attrName Name of the attribute to be retrieved.
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService
   * @param {String} opts.fiwareServicePath
   * @param {String} opts.type Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
   * @param {module:api/AttributeValueApi~getAttributeValueCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AttributeValueObject}
   */
  getAttributeValue(entityId, attrName, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling getAttributeValue"
      );
    }
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling getAttributeValue"
      );
    }

    let pathParams = {
      entityId: entityId,
      attrName: attrName,
    };
    let queryParams = {
      type: opts['type'],
    };
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json', 'plain/text'];
    let returnType = AttributeValueObject;
    return this.apiClient.callApi(
      '/entities/{entityId}/attrs/{attrName}/value',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the updateAttributeValue operation.
   * @callback module:api/AttributeValueApi~updateAttributeValueCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * The request payload is the new attribute value. * If the request payload MIME type is `application/json`,   then the value of the attribute is set to   the JSON object or array coded in the payload (if the payload   is not a valid JSON document, then an error is returned). * If the request payload MIME type is `text/plain`, then the following   algorithm is applied to the payload:   * If the payload starts and ends with citation-marks (`\"`), the value     is taken as a string (the citation marks themselves are not     considered part of the string)   * If `true` or `false`, the value is taken as a boolean.   * If `null`, the value is taken as null.   * If these first three tests 'fail', the text is interpreted as     a number.   * If not a valid number, then an error is returned and the attribute's     value is unchanged.  The payload MIME type in the request is specified in the `Content-Type` HTTP header. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {String} entityId Id of the entity to be updated.
   * @param {String} attrName Attribute name.
   * @param {Object.<String, {String: Object}>} requestBody
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService
   * @param {String} opts.fiwareServicePath
   * @param {String} opts.type Entity type, to avoid ambiguity in the case there are several entities with the same entity id.
   * @param {module:api/AttributeValueApi~updateAttributeValueCallback} callback The callback function, accepting three arguments: error, data, response
   */
  updateAttributeValue(entityId, attrName, requestBody, opts, callback) {
    opts = opts || {};
    let postBody = requestBody;
    // verify the required parameter 'entityId' is set
    if (entityId === undefined || entityId === null) {
      throw new Error(
        "Missing the required parameter 'entityId' when calling updateAttributeValue"
      );
    }
    // verify the required parameter 'attrName' is set
    if (attrName === undefined || attrName === null) {
      throw new Error(
        "Missing the required parameter 'attrName' when calling updateAttributeValue"
      );
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody === undefined || requestBody === null) {
      throw new Error(
        "Missing the required parameter 'requestBody' when calling updateAttributeValue"
      );
    }

    let pathParams = {
      entityId: entityId,
      attrName: attrName,
    };
    let queryParams = {
      type: opts['type'],
    };
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = ['application/json', 'plain/text'];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/entities/{entityId}/attrs/{attrName}/value',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
