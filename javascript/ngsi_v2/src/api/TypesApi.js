/**
 * ngsi_v2
 * NGSI V2 API RC-2018.07
 *
 * The version of the OpenAPI document: 0.2.2
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityType from '../model/EntityType';
import EntityTypeBody from '../model/EntityTypeBody';
import ErrorResponse from '../model/ErrorResponse';

/**
 * Types service.
 * @module api/TypesApi
 * @version 0.2.2
 */
export default class TypesApi {
  /**
   * Constructs a new TypesApi.
   * @alias module:api/TypesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the retrieveEntityType operation.
   * @callback module:api/TypesApi~retrieveEntityTypeCallback
   * @param {String} error Error message, if any.
   * @param {module:model/EntityTypeBody} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * This operation returns a JSON object with information about the type: * `attrs` : the set of attribute names along with all the entities of   such type, represented in a JSON object whose keys are the attribute   names and whose values contain information of such attributes (in   particular a list of the types used by attributes with that name along   with all the entities). * `count` : the number of entities belonging to that type.  Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {String} entityType Entity Type
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {module:api/TypesApi~retrieveEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/EntityTypeBody}
   */
  retrieveEntityType(entityType, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'entityType' is set
    if (entityType === undefined || entityType === null) {
      throw new Error(
        "Missing the required parameter 'entityType' when calling retrieveEntityType"
      );
    }

    let pathParams = {
      entityType: entityType,
    };
    let queryParams = {};
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityTypeBody;
    return this.apiClient.callApi(
      '/types/{entityType}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the retrieveEntityTypes operation.
   * @callback module:api/TypesApi~retrieveEntityTypesCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/EntityType>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * If the `values` option is not in use, this operation returns a JSON array with the entity types. Each element is a JSON object with information about the type: * `type` : the entity type name. * `attrs` : the set of attribute names along with all the entities of   such type, represented in a JSON object whose keys are the attribute   names and whose values contain information of such attributes (in   particular a list of the types used by attributes with that name along   with all the entities). * `count` : the number of entities belonging to that type. If the `values` option is used, the operation returns a JSON array with a list of entity type names as strings. Results are ordered by entity `type` in alphabetical order. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection   on [Error Responses](https://fiware.github.io/specifications/ngsiv2/stable)   for more details.
   * @param {Object} opts Optional parameters
   * @param {String} opts.fiwareService When \"-multiservice\" is used, Orion uses the \"Fiware-Service\" HTTP header in the request to identify the service/tenant. If the header is not present in the HTTP request, the default service/tenant is used..
   * @param {String} opts.fiwareServicePath Fiware-ServicePath is an optional header. It is assumed that all the entities created without Fiware-ServicePath (or that don't include service path information in the database) belongs to a root scope \"/\" implicitely.
   * @param {Number} opts.limit Limit the number of types to be retrieved.
   * @param {Number} opts.offset Skip a number of records.
   * @param {module:model/String} opts.options Options dictionary.
   * @param {module:api/TypesApi~retrieveEntityTypesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/EntityType>}
   */
  retrieveEntityTypes(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
      options: opts['options'],
    };
    let headerParams = {
      'Fiware-Service': opts['fiwareService'],
      'Fiware-ServicePath': opts['fiwareServicePath'],
    };
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [EntityType];
    return this.apiClient.callApi(
      '/types/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
