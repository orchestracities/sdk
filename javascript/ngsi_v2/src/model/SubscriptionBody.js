/**
 * ngsi_v2
 * NGSI V2 API RC-2018.07
 *
 * The version of the OpenAPI document: 0.2.2
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionBodyNotification from './SubscriptionBodyNotification';
import SubscriptionBodySubject from './SubscriptionBodySubject';

/**
 * The SubscriptionBody model module.
 * @module model/SubscriptionBody
 * @version 0.2.2
 */
class SubscriptionBody {
  /**
   * Constructs a new <code>SubscriptionBody</code>.
   * @alias module:model/SubscriptionBody
   * @param subject {module:model/SubscriptionBodySubject}
   * @param notification {module:model/SubscriptionBodyNotification}
   */
  constructor(subject, notification) {
    SubscriptionBody.initialize(this, subject, notification);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, subject, notification) {
    obj['subject'] = subject;
    obj['notification'] = notification;
  }

  /**
   * Constructs a <code>SubscriptionBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SubscriptionBody} obj Optional instance to populate.
   * @return {module:model/SubscriptionBody} The populated <code>SubscriptionBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SubscriptionBody();

      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(
          data['description'],
          'String'
        );
      }
      if (data.hasOwnProperty('subject')) {
        obj['subject'] = SubscriptionBodySubject.constructFromObject(
          data['subject']
        );
      }
      if (data.hasOwnProperty('notification')) {
        obj['notification'] = SubscriptionBodyNotification.constructFromObject(
          data['notification']
        );
      }
      if (data.hasOwnProperty('expires')) {
        obj['expires'] = ApiClient.convertToType(data['expires'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('throttling')) {
        obj['throttling'] = ApiClient.convertToType(
          data['throttling'],
          'Number'
        );
      }
    }
    return obj;
  }
}

/**
 * @member {String} description
 */
SubscriptionBody.prototype['description'] = undefined;

/**
 * @member {module:model/SubscriptionBodySubject} subject
 */
SubscriptionBody.prototype['subject'] = undefined;

/**
 * @member {module:model/SubscriptionBodyNotification} notification
 */
SubscriptionBody.prototype['notification'] = undefined;

/**
 * @member {Date} expires
 */
SubscriptionBody.prototype['expires'] = undefined;

/**
 * @member {module:model/SubscriptionBody.StatusEnum} status
 */
SubscriptionBody.prototype['status'] = undefined;

/**
 * @member {Number} throttling
 */
SubscriptionBody.prototype['throttling'] = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionBody['StatusEnum'] = {
  /**
   * value: "active"
   * @const
   */
  active: 'active',

  /**
   * value: "inactive"
   * @const
   */
  inactive: 'inactive',
};

export default SubscriptionBody;
