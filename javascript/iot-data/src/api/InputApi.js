/**
 * iot-data
 * IoT Data
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: info@orchestracities.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * Input service.
 * @module api/InputApi
 * @version 1.9.0
 */
export default class InputApi {
  /**
   * Constructs a new InputApi.
   * @alias module:api/InputApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the jsonData operation.
   * @callback module:api/InputApi~jsonDataCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Send data to a device using JSON
   * @param {String} i Device ID (unique for the API Key).
   * @param {String} k API Key for the service the device is registered on.
   * @param {Object} body The payload consists of a simple plain JSON object, where each attribute of the object will be mapped to an attribute in the NGSI entity. By \"plain JSON objects\" or \"single-level JSON objects\" we mean:    - valid JSON objects serialized as unescaped strings.   - JSON objects with a single level, i.e.: all the first level attributes of the JSON object are Strings or Numbers (not arrays or other objects).   Additional information are available at [https://fiware-iotagent-json.rtfd.io/](https://fiware-iotagent-json.rtfd.io/)
   * @param {Object} opts Optional parameters
   * @param {String} opts.t Timestamp of the measure. Will override the automatic IoTAgent timestamp (optional).
   * @param {module:api/InputApi~jsonDataCallback} callback The callback function, accepting three arguments: error, data, response
   */
  jsonData(i, k, body, opts, callback) {
    opts = opts || {};
    let postBody = body;
    // verify the required parameter 'i' is set
    if (i === undefined || i === null) {
      throw new Error(
        "Missing the required parameter 'i' when calling jsonData"
      );
    }
    // verify the required parameter 'k' is set
    if (k === undefined || k === null) {
      throw new Error(
        "Missing the required parameter 'k' when calling jsonData"
      );
    }
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling jsonData"
      );
    }

    let pathParams = {};
    let queryParams = {
      i: i,
      k: k,
      t: opts['t'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = ['application/json'];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/json',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the ulData operation.
   * @callback module:api/InputApi~ulDataCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Send data to a device using UL2.0
   * @param {String} i Device ID (unique for the API Key).
   * @param {String} k API Key for the service the device is registered on.
   * @param {String} body The payload for information update requests is composed of a list of key-value pairs separated by the `|` character. E.g.: `t|15|k|abc|z|true` In this example, two attributes, one named \"t\" with value \"15\" and another named \"k\" with value \"abc\" are transmitted. NGSI v2 update uses 15 (number), abc (string), and true (boolean). This functionality relies on string measures casting feature implemented in the iotagent library. In addition, the device has to be provisioned using the right types for the attributes to be cast, which are:   * Type `Text` for sting   * Type `Number` for integer or float numbers   * Type `Boolean` for boolean   * Type `None` for null.  Commands syntax is as follows: `<device name>@<command name>|<command value>`.  Additional information are available at [https://fiware-iotagent-ul.rtfd.io/](https://fiware-iotagent-ul.rtfd.io/)
   * @param {Object} opts Optional parameters
   * @param {String} opts.t Timestamp of the measure. Will override the automatic IoTAgent timestamp (optional).
   * @param {module:api/InputApi~ulDataCallback} callback The callback function, accepting three arguments: error, data, response
   */
  ulData(i, k, body, opts, callback) {
    opts = opts || {};
    let postBody = body;
    // verify the required parameter 'i' is set
    if (i === undefined || i === null) {
      throw new Error("Missing the required parameter 'i' when calling ulData");
    }
    // verify the required parameter 'k' is set
    if (k === undefined || k === null) {
      throw new Error("Missing the required parameter 'k' when calling ulData");
    }
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling ulData"
      );
    }

    let pathParams = {};
    let queryParams = {
      i: i,
      k: k,
      t: opts['t'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ['ApiKeyAuth', 'BearerAuth'];
    let contentTypes = ['text/plain'];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/ul',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
